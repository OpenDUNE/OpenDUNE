#!/bin/sh

check_path_characters() {
	if [ -n "`echo $ROOT_DIR | grep '[^-_A-Za-z0-9\/\\\.:]'`" ]; then
		echo "WARNING: The path contains a non-alphanumeric character that might cause"
		echo "         failures in subsequent build stages. Any failures with the build"
		echo "         will most likely be caused by this."
	fi
}

CONFIGURE_EXECUTABLE="$_"
# On *nix systems those two are equal when ./configure is done
if [ "$0" != "$CONFIGURE_EXECUTABLE" ]; then
	# On some systems, when ./configure is triggered from 'make'
	#  the $_ is filled with 'make'. So if that is true, skip 'make'
	#  and use $0 (and hope that is correct ;))
	if [ -n "`echo $CONFIGURE_EXECUTABLE | grep make`" ]; then
		CONFIGURE_EXECUTABLE="$0"
	else
		CONFIGURE_EXECUTABLE="$CONFIGURE_EXECUTABLE $0"
	fi
fi
# Find out where configure is (in what dir)
ROOT_DIR="`dirname $0`"
# For MSYS/MinGW we want to know the FULL path. This as that path is generated
# once you call an outside binary. Having the same path for the rest is needed
# for dependency checking.
# pwd -W returns said FULL path, but doesn't exist on others so fall back.
ROOT_DIR="`cd $ROOT_DIR && (pwd -W 2>/dev/null || pwd 2>/dev/null)`"

check_path_characters

# Same here as for the ROOT_DIR above
PWD="`pwd -W 2>/dev/null || pwd 2>/dev/null`"
PREFIX="$PWD/bin"

. $ROOT_DIR/config.lib

# Set default dirs
OBJS_DIR="$PWD/objs"
BASE_SRC_OBJS_DIR="$OBJS_DIR"
BIN_DIR="$PREFIX"
SRC_DIR="$ROOT_DIR/src"
TOOLS_DIR="$ROOT_DIR/tools"
SOURCE_LIST="$ROOT_DIR/source.list"

if [ "$1" = "--reconfig" ] || [ "$1" = "--reconfigure" ]; then
	if [ ! -f "config.cache" ]; then
		echo "can't reconfigure, because never configured before"
		exit 1
	fi
	# Make sure we don't lock config.cache
	cat config.cache | sed 's@\\ @\\\\ @g' > cache.tmp
	sh cache.tmp
	RET=$?
	rm -f cache.tmp
	exit $RET
fi

set_default
detect_params "$@"
check_params
save_params
make_cflags_and_ldflags

EXE=""
if [ "$os" = "MINGW" ] || [ "$os" = "CYGWIN" ] || [ "$os" = "OS2" ] || [ "$os" = "DOS" ] || [ "$os" = "WINCE" ]; then
	EXE=".exe"
elif [ "$os" = "TOS" ]; then
	EXE=".tos"
fi

OPENDUNE="opendune$EXE"
DEPEND="depend$EXE"

if [ -z "$sort" ]; then
	PIPE_SORT="sed s@a@a@"
else
	PIPE_SORT="$sort"
fi

# Read the source.list and process it
AWKCOMMAND='
	{  }
	/^(	*)#end/  { if (deep == skip) { skip -= 1; } deep -= 1; next; }
	/^(	*)#else/ { if (deep == skip) { skip -= 1; } else if (deep - 1 == skip) { skip += 1; } next; }
	/^(	*)#if/   {
		gsub("	", "", $0);
		gsub("^#if ", "", $0);

		if (deep != skip) { deep += 1; next; }

		deep += 1;

		if ($0 == "SDL2"        && "'$sdl2_config'" == "")         { next; }
		if ($0 == "SDL"         && "'$sdl_config'" == "")          { next; }
		if ($0 == "ALSA"        && "'$with_asound'" == "0")        { next; }
		if ($0 == "OSS"         && "'$with_oss'" == "0")           { next; }
		if ($0 == "MUNT"        && "'$with_munt'" == "0")          { next; }
		if ($0 == "PULSE"       && "'$with_pulse'" == "0")         { next; }
		if ($0 == "OSX"         && "'$os'" != "OSX")               { next; }
		if ($0 == "TOS"         && "'$os'" != "TOS")               { next; }
		if ($0 == "WIN32"       && "'$os'" != "MINGW" &&
		                 "'$os'" != "CYGWIN" && "'$os'" != "MSVC") { next; }

		skip += 1;

		next;
	}
	/^(	*)#/ { next }
	/^$/ { next }
	/\.h$/ { next }
	/\.hpp$/ { next }
	{
		if (deep == skip) {
			gsub("	", "", $0);
			print $0;
		}
	}
'

# Read the source.list and process it
# Please escape ALL " within ` because e.g. "" terminates the string in some sh implementations
SRCS="`< $ROOT_DIR/source.list tr '\r' '\n' | $awk \"$AWKCOMMAND\" | $PIPE_SORT`"

OBJS_C="`  echo \"$SRCS\" | $awk ' { ORS = \" \" } /\.c$/   { gsub(\".c$\",   \".o\", $0); print $0; }'`"
OBJS_S="`  echo \"$SRCS\" | $awk ' { ORS = \" \" } /\.s$/   { gsub(\".s$\",   \".o\", $0); print $0; }'`"
SRCS="`    echo \"$SRCS\" | $awk ' { ORS = \" \" } { print $0; }'`"

# In makefiles, we always use -u for sort
if [ -z "$sort" ]; then
	sort="sed s@a@a@"
else
	sort="$sort -u"
fi

CONFIGURE_FILES="$ROOT_DIR/configure $ROOT_DIR/config.lib $ROOT_DIR/Makefile.in"

generate_main
generate_src

check_path_characters
